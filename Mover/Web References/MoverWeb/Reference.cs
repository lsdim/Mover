//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Этот исходный текст был создан автоматически: Microsoft.VSDesigner, версия: 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Mover.MoverWeb {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MoverServSoap", Namespace="http://tempuri.org/")]
    public partial class MoverServ : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IPOperationCompleted;
        
        private System.Threading.SendOrPostCallback REGOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCnfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCnfOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MoverServ() {
            this.Url = global::Mover.Properties.Settings.Default.Mover_MoverWeb_MoverServ;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IPCompletedEventHandler IPCompleted;
        
        /// <remarks/>
        public event REGCompletedEventHandler REGCompleted;
        
        /// <remarks/>
        public event SetCnfCompletedEventHandler SetCnfCompleted;
        
        /// <remarks/>
        public event GetCnfCompletedEventHandler GetCnfCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IP(string query) {
            object[] results = this.Invoke("IP", new object[] {
                        query});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IPAsync(string query) {
            this.IPAsync(query, null);
        }
        
        /// <remarks/>
        public void IPAsync(string query, object userState) {
            if ((this.IPOperationCompleted == null)) {
                this.IPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIPOperationCompleted);
            }
            this.InvokeAsync("IP", new object[] {
                        query}, this.IPOperationCompleted, userState);
        }
        
        private void OnIPOperationCompleted(object arg) {
            if ((this.IPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IPCompleted(this, new IPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/REG", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string REG(string ip, string name, string path, string vers, int aStart, int interval, int baloon) {
            object[] results = this.Invoke("REG", new object[] {
                        ip,
                        name,
                        path,
                        vers,
                        aStart,
                        interval,
                        baloon});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void REGAsync(string ip, string name, string path, string vers, int aStart, int interval, int baloon) {
            this.REGAsync(ip, name, path, vers, aStart, interval, baloon, null);
        }
        
        /// <remarks/>
        public void REGAsync(string ip, string name, string path, string vers, int aStart, int interval, int baloon, object userState) {
            if ((this.REGOperationCompleted == null)) {
                this.REGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnREGOperationCompleted);
            }
            this.InvokeAsync("REG", new object[] {
                        ip,
                        name,
                        path,
                        vers,
                        aStart,
                        interval,
                        baloon}, this.REGOperationCompleted, userState);
        }
        
        private void OnREGOperationCompleted(object arg) {
            if ((this.REGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.REGCompleted(this, new REGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCnf", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetCnf(string dir_id, string MC, string mask, string stat, string dir, string ip, int interval, int baloon) {
            object[] results = this.Invoke("SetCnf", new object[] {
                        dir_id,
                        MC,
                        mask,
                        stat,
                        dir,
                        ip,
                        interval,
                        baloon});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetCnfAsync(string dir_id, string MC, string mask, string stat, string dir, string ip, int interval, int baloon) {
            this.SetCnfAsync(dir_id, MC, mask, stat, dir, ip, interval, baloon, null);
        }
        
        /// <remarks/>
        public void SetCnfAsync(string dir_id, string MC, string mask, string stat, string dir, string ip, int interval, int baloon, object userState) {
            if ((this.SetCnfOperationCompleted == null)) {
                this.SetCnfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCnfOperationCompleted);
            }
            this.InvokeAsync("SetCnf", new object[] {
                        dir_id,
                        MC,
                        mask,
                        stat,
                        dir,
                        ip,
                        interval,
                        baloon}, this.SetCnfOperationCompleted, userState);
        }
        
        private void OnSetCnfOperationCompleted(object arg) {
            if ((this.SetCnfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCnfCompleted(this, new SetCnfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCnf", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCnf(string m_hash, string ip) {
            object[] results = this.Invoke("GetCnf", new object[] {
                        m_hash,
                        ip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCnfAsync(string m_hash, string ip) {
            this.GetCnfAsync(m_hash, ip, null);
        }
        
        /// <remarks/>
        public void GetCnfAsync(string m_hash, string ip, object userState) {
            if ((this.GetCnfOperationCompleted == null)) {
                this.GetCnfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCnfOperationCompleted);
            }
            this.InvokeAsync("GetCnf", new object[] {
                        m_hash,
                        ip}, this.GetCnfOperationCompleted, userState);
        }
        
        private void OnGetCnfOperationCompleted(object arg) {
            if ((this.GetCnfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCnfCompleted(this, new GetCnfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void IPCompletedEventHandler(object sender, IPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void REGCompletedEventHandler(object sender, REGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class REGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal REGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SetCnfCompletedEventHandler(object sender, SetCnfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCnfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCnfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetCnfCompletedEventHandler(object sender, GetCnfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCnfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCnfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591